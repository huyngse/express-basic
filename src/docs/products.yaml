openapi: 3.0.0

info:
  title: Camp Store Products API
  version: 1.0.0
  description: API for managing camp store products

tags:
  - name: Products
    description: API for managing camp store products

paths:
  /api/products:
    get:
      summary: Get all products
      description: Retrieve a paginated list of all available products. You can also filter by specific fields like category or inStock~!
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          $ref: '#/components/responses/ProductList'

    post:
      summary: Create a new product
      description: Adds a new product to the list (the product ID is automatically generated)
      tags:
        - Products
      requestBody:
        $ref: '#/components/requestBodies/ProductCreate'
      responses:
        201:
          $ref: '#/components/responses/ProductCreated'
        400:
          $ref: '#/components/responses/BadRequest'

  /api/products/{id}:
    get:
      summary: Get a product by ID
      description: Fetch a single product using its unique ID
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/ProductFound'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update an existing product
      description: Updates product details by its unique ID. Only the provided fields will be updated.
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/ProductUpdate'
      responses:
        200:
          $ref: '#/components/responses/ProductUpdated'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Partially update a product
      description: Updates only the specified fields of a product by its unique ID.
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/ProductPartialUpdate'
      responses:
        200:
          $ref: '#/components/responses/ProductUpdated'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete a product by ID
      description: Removes a product from the array by its ID
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/ProductDeleted'
        404:
          $ref: '#/components/responses/NotFound'

components:
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: integer
      description: The product ID
    filter:
      name: filter
      in: query
      schema:
        type: string
      description: The field name to filter by (e.g., `category`, `inStock`, `name`)
    value:
      name: value
      in: query
      schema:
        type: string
      description: The value to filter the selected field by
    page:
      name: page
      in: query
      schema:
        type: integer
        default: 1
      description: The page number for pagination
    limit:
      name: limit
      in: query
      schema:
        type: integer
        default: 10
      description: The number of products per page

  requestBodies:
    ProductCreate:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductInput'
    ProductUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductInput'
    ProductPartialUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductPartialInput'

  responses:
    ProductList:
      description: A paginated list of products
      content:
        application/json:
          schema:
            type: object
            properties:
              page:
                type: integer
              limit:
                type: integer
              totalItems:
                type: integer
              totalPages:
                type: integer
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    ProductCreated:
      description: Product created successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Product created successfully!
              product:
                $ref: '#/components/schemas/Product'
    ProductFound:
      description: Product found successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    ProductUpdated:
      description: Product updated successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Product updated successfully!
              product:
                $ref: '#/components/schemas/Product'
    ProductDeleted:
      description: Product deleted successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Product deleted successfully!
              deleted:
                $ref: '#/components/schemas/Product'
    BadRequest:
      description: Invalid request or missing data
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Missing required fields!
    NotFound:
      description: Product not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Product not found!

  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: Cozy Camp Mug
        description:
          type: string
          example: A sturdy enamel mug perfect for hot cocoa under the stars~
        price:
          type: number
          example: 14.99
        inStock:
          type: boolean
          example: true
        category:
          type: string
          example: Camping Gear
        image:
          type: string
          example: /images/mug.jpg
    ProductInput:
      type: object
      properties:
        name:
          type: string
          example: Cozy Camp Mug
        description:
          type: string
          example: A sturdy enamel mug perfect for hot cocoa under the stars~
        price:
          type: number
          example: 14.99
        inStock:
          type: boolean
          example: true
        category:
          type: string
          example: Camping Gear
        image:
          type: string
          example: /images/mug.jpg
    ProductPartialInput:
      type: object
      properties:
        name:
          type: string
          example: Cozy Camp Mug
        description:
          type: string
          example: A sturdy enamel mug perfect for hot cocoa under the stars~
        price:
          type: number
          example: 14.99
        inStock:
          type: boolean
          example: true
        category:
          type: string
          example: Camping Gear
        image:
          type: string
          example: /images/mug.jpg
